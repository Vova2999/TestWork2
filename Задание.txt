Основные задачи:

1) Создать класс ComplexMap
2) Запустить тесты и убедиться в том, что все работает правильно. Тестовые сценарии и код main я выдам


Методы класса:

1) int GetSize()
 - получить количество элементов в ComplexMap

2) void AddValue(int key, TValue value)
 - добавить значение TValue по ключу key. В случае, если по переданному ключу уже есть значение, то бросить исключение
3) void AddArray(int key, TValue* values, int size)
 - добавить массив TValue* по ключу key. В случае, если по переданному ключу уже есть массив, то бросить исключение
4) void AddString(int key, char* line)
 - добавить строку line по ключу key. В случае, если по переданному ключу уже есть строка, то бросить исключение

5) void AddValueOrReplace(int key, TValue value)
 - добавить значение TValue по ключу key. В случае, если по переданному ключу уже есть значение, то заменить его
6) void AddArrayOrReplace(int key, TValue* values, int size)
 - добавить массив TValue* по ключу key. В случае, если по переданному ключу уже есть массив, то заменить его
7) void AddStringOrReplace(int key, char* line)
 - добавить строку line по ключу key. В случае, если по переданному ключу уже есть строка, то заменить его

8) TValue GetValue(int key)
 - получить значение по ключу key. В случае, если по переданному ключу нет значения, то бросить исключение. В случае, если по переданному ключу лежит не TValue (например, лежит массив или строка), то бросить исключение, отличное от исключения отсутствия ключа
9) TValue* GetArray(int key, int* size)
 - получить массив TValue по ключу key. В случае, если по переданному ключу нет массива, то бросить исключение. В случае, если по переданному ключу лежит не массив (например, лежит TValue или строка), то бросить исключение, отличное от исключения отсутствия ключа
10) char* GetString(int key)
 - получить строку по ключу key. В случае, если по переданному ключу нет строки, то бросить исключение. В случае, если по переданному ключу лежит не строка (например, лежит TValue или массив), то бросить исключение, отличное от исключения отсутствия ключа

11) bool TryGetValue(int key, TValue* value)
 - получить значение по ключу key. В случае успеха возвращается true и значение в TValue* value. В случае, если по переданному ключу нет значения, то вернуть false. В случае, если по переданному ключу лежит не TValue (например, лежит массив или строка), то вернуть false
12) bool TryGetArray(int key, TValue** values, int* size)
 - получить массив TValue по ключу key. В случае успеха возвращается true, массив в TValue** values и его размер в int* size. В случае, если по переданному ключу нет значения, то вернуть false. В случае, если по переданному ключу лежит не массив (например, лежит TValue или строка), то вернуть false
13) bool TryGetString(int key, char** line)
 - получить строку по ключу key. В случае успеха возвращается true и строка в char** line. В случае, если по переданному ключу нет строки, то вернуть false. В случае, если по переданному ключу лежит не строка (например, лежит TValue или массив), то вернуть false

14) void Remove(int key)
 - удалить по ключу. В случае, если по ключу ничего нет, то бросить исключение
15) bool TryRemove(int key)
 - удалить по ключу. В случае успеха вернуть true. В случае, если по ключу ничего нет, то вернуть false
16) void RemoveAll()
 - удалить все записи


Подсказки:

Внутри ComplexMap должен быть map<int, ValueType*> valuesMap
ValueType - базовый класс для классов SingleValueType, ArrayValueType и StringValueType. Эти классы представляют различные типы хранимых данных
При добавлении массива и строки значение должно быть перекопированно в ArrayValueType и StringValueType, чтобы при удалении массива извне он не удалился из ComplexMap (на это есть тесты в методе RemoveTempMemory)
Для Add/Get методов можно сделать вспомогательные приватные методы, чтобы не было дублирования кода. Для Get методов можно ввести еще один template. Например, сигнатура вспомогательного метода Get может быть такой: template<typename TValueType> TValueType* GetValueType(int key), где TValueType - какой-либо наследник ValueType
Не забудьте про деструкторы!
